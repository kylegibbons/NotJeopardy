import { Injectable } from '@angular/core';
import { QueueingSubject } from 'queueing-subject';
import { Observable } from 'rxjs';
import websocketConnect from 'rxjs-websockets';
import { share } from 'rxjs/operators';
import { environment } from '../../environments/environment';

@Injectable()
export class WebsocketService {
  private inputStream = new QueueingSubject<string>();
  public messages: Observable<String>;
  public ConnectionStatus: Observable<Number>;

  public constructor() { }

  public connect() {
    if (this.messages) {
      return;
    }

    // Using share() causes a single websocket to be created when the first
    // observer subscribes. This socket is shared with subsequent observers
    // and closed when the observer count falls to zero.
    const { messages, connectionStatus } = websocketConnect(
      'ws://' + environment.base_url + '/ws', this.inputStream
    );

    this.messages = messages;
    this.ConnectionStatus = connectionStatus;

    this.messages.pipe(share());

  }

  /*public send(message: string):void {
    // If the websocket is not connected then the QueueingSubject will ensure
    // that messages are queued and delivered when the websocket reconnects.
    // A regular Subject can be used to discard messages sent when the websocket
    // is disconnected.
    this.inputStream.next(message)
  }*/
}
